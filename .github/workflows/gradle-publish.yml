name: Smart Forge Mod Builder

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

jobs:
  smart-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        java: [17]
        exclude:
          - os: windows-latest
            java: 8

    env:
      CACHE_KEY: forge-mod-${{ hashFiles('build.gradle', 'settings.gradle', 'gradle.properties') }}

    steps:
    # 步骤1：代码检出
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 步骤2：智能配置解析
    - name: Parse Project Configs
      id: config
      shell: bash
      run: |
        # 解析mods.toml
        MODID=$(grep -Po 'modId\s*=\s*"\K[^"]+' src/main/resources/META-INF/mods.toml | head -1)
        VERSION=$(grep -Po 'version\s*=\s*"\K[^"]+' src/main/resources/META-INF/mods.toml | head -1)
        
        # 解析build.gradle
        FORGE_VERSION=$(grep -Po 'minecraft.*version.*\K[\d\.-]+' build.gradle | head -1)
        MC_VERSION=$(echo "$FORGE_VERSION" | cut -d'-' -f1)
        
        # 检测关键组件
        HAS_MIXIN=$(grep -q "mixin" build.gradle && echo "true" || echo "false")
        HAS_GECKOLIB=$(grep -q "geckolib" build.gradle && echo "true" || echo "false")
        
        # 输出变量
        echo "modid=$MODID" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "mc_version=$MC_VERSION" >> $GITHUB_OUTPUT
        echo "forge_version=$FORGE_VERSION" >> $GITHUB_OUTPUT
        echo "has_mixin=$HAS_MIXIN" >> $GITHUB_OUTPUT
        echo "has_geckolib=$HAS_GECKOLIB" >> $GITHUB_OUTPUT
        echo "build_date=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

    # 步骤3：环境配置
    - name: Setup JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        cache: 'gradle'

    # 步骤4：缓存优化
    - name: Gradle Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ env.CACHE_KEY }}

    # 步骤5：跨平台构建
    - name: Build Mod
      shell: bash
      run: |
        # 设置构建参数
        BUILD_ARGS="build --stacktrace --no-daemon"
        
        # 根据检测结果调整参数
        if [ "${{ steps.config.outputs.has_mixin }}" = "true" ]; then
          BUILD_ARGS="$BUILD_ARGS -Pmixin.refMap=true"
          echo "Mixin support enabled"
        fi
        
        if [ "${{ runner.os }}" = "Windows" ]; then
          ./gradlew.bat $BUILD_ARGS
        else
          chmod +x gradlew
          ./gradlew $BUILD_ARGS
        fi

        # 验证输出
        if ! ls build/libs/${{ steps.config.outputs.modid }}*.jar 1> /dev/null 2>&1; then
          echo "::error::Build failed: No output JAR found"
          exit 1
        fi

    # 步骤6：产物处理
    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.config.outputs.modid }}-${{ steps.config.outputs.version }}-${{ runner.os }}
        path: |
          build/libs/*.jar
          build/libs/*.json
          build/libs/*.md
        if-no-files-found: error
        retention-days: 7

    # 步骤7：自动发布
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: build/libs/${{ steps.config.outputs.modid }}*.jar
        tag_name: v${{ steps.config.outputs.version }}
        body: |
          ### 自动生成发布说明
          **ModID:** `${{ steps.config.outputs.modid }}`  
          **版本:** ${{ steps.config.outputs.version }}  
          **Minecraft:** ${{ steps.config.outputs.mc_version }}  
          **Forge:** ${{ steps.config.outputs.forge_version }}  
          
          **构建环境:**
          - 系统: ${{ runner.os }}
          - JDK: ${{ matrix.java }}
          - 构建时间: ${{ steps.config.outputs.build_date }}

          **检测到组件:**
          - Mixin: ${{ steps.config.outputs.has_mixin }}
          - GeckoLib: ${{ steps.config.outputs.has_geckolib }}

    # 步骤8：构建通知
    - name: Build Status
      if: always()
      run: |
        echo "::notice title=构建摘要::ModID: ${{ steps.config.outputs.modid }} | 版本: ${{ steps.config.outputs.version }}"
        echo "::notice::Minecraft: ${{ steps.config.outputs.mc_version }} | Forge: ${{ steps.config.outputs.forge_version }}"
