name: Smart Forge Mod Builder

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

jobs:
  smart-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        java: [17]
        exclude:
          - os: windows-latest
            java: 8

    steps:
    # 步骤1：代码检出（使用v4版本）
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 步骤2：配置解析
    - name: Parse Project Configs
      id: config
      shell: bash
      run: |
        # 添加错误处理
        set -euo pipefail
        
        MODID=$(grep -Po 'modId\s*=\s*"\K[^"]+' src/main/resources/META-INF/mods.toml | head -1 || echo "unnamed")
        VERSION=$(grep -Po 'version\s*=\s*"\K[^"]+' src/main/resources/META-INF/mods.toml | head -1 || echo "0.0.0")
        FORGE_VERSION=$(grep -Po 'minecraft.*version.*\K[\d\.-]+' build.gradle | head -1 || echo "1.16.5-36.2.39")
        
        echo "modid=$MODID" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "mc_version=$(echo $FORGE_VERSION | cut -d'-' -f1)" >> $GITHUB_OUTPUT
        echo "forge_version=$FORGE_VERSION" >> $GITHUB_OUTPUT
        echo "has_mixin=$(grep -q "mixin" build.gradle && echo "true" || echo "false")" >> $GITHUB_OUTPUT
        echo "has_geckolib=$(grep -q "geckolib" build.gradle && echo "true" || echo "false")" >> $GITHUB_OUTPUT

    # 步骤3：JDK设置（使用v3版本）
    - name: Setup JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        cache: 'gradle'

    # 步骤4：缓存优化（使用v3版本）
    - name: Cache Gradle
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/gradle.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # 步骤5：构建执行
    - name: Build with Gradle
      shell: bash
      run: |
        ./gradlew build \
          --no-daemon \
          --stacktrace \
          ${{ inputs.skip_tests && '-x test' || '' }} \
          ${{ steps.config.outputs.has_mixin == 'true' && '-Pmixin.refMap=true' || '' }}

        # 验证输出
        ls build/libs/${{ steps.config.outputs.modid }}*.jar || {
          echo "::error::No JAR file produced"
          exit 1
        }

    # 步骤6：上传产物（使用v3版本，明确指定）
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.config.outputs.modid }}-${{ steps.config.outputs.version }}
        path: |
          build/libs/*.jar
          build/libs/*-sources.jar
        if-no-files-found: error
        retention-days: 7

    # 步骤7：自动发布（使用v1版本）
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: build/libs/*.jar
        tag_name: v${{ steps.config.outputs.version }}
        body: |
          ### Release Notes
          **Mod:** ${{ steps.config.outputs.modid }}  
          **Version:** ${{ steps.config.outputs.version }}  
          **Minecraft:** ${{ steps.config.outputs.mc_version }}  
          **Forge:** ${{ steps.config.outputs.forge_version }}
