name: Forge Mod CI

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Xmx2g"
  FORGE_GRADLE_VERSION: "5.1.+"

jobs:
  build:
    name: Build (${{ matrix.os }}, Java ${{ matrix.java }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        java: [17]
    
    steps:
    # 步骤1：检出代码
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 步骤2：设置Java环境
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        cache: 'gradle'

    # 步骤3：配置Gradle缓存
    - name: Cache Gradle
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/gradle.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # 步骤4：解析mod信息
    - name: Parse Mod Info
      id: mod-info
      shell: bash
      run: |
        MODID=$(grep -Po 'modId\s*=\s*"\K[^"]+' src/main/resources/META-INF/mods.toml || echo "unnamed")
        VERSION=$(grep -Po 'version\s*=\s*"\K[^"]+' src/main/resources/META-INF/mods.toml || echo "0.0.0")
        echo "modid=$MODID" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    # 步骤5：执行构建
    - name: Build Mod
      shell: bash
      run: |
        # 确保gradlew可执行
        if [[ "$RUNNER_OS" != "Windows" ]]; then
          chmod +x gradlew
        fi

        # 构建命令
        BUILD_CMD="./gradlew"
        [[ "$RUNNER_OS" == "Windows" ]] && BUILD_CMD="./gradlew.bat"
        
        $BUILD_CMD build \
          --no-daemon \
          --stacktrace \
          ${{ inputs.skip_tests && '-x test' || '' }}

        # 验证输出
        if ! ls build/libs/*.jar >/dev/null 2>&1; then
          echo "::error::Build failed - No JAR files produced"
          exit 1
        fi

    # 步骤6：上传构建产物
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.mod-info.outputs.modid }}-${{ steps.mod-info.outputs.version }}-${{ runner.os }}
        path: build/libs/*.jar
        if-no-files-found: error
        retention-days: 7

    # 步骤7：发布到GitHub Releases
    - name: Create Release
      if: success() && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: build/libs/*.jar
        tag_name: v${{ steps.mod-info.outputs.version }}
        body: |
          ### Build Summary
          **Mod ID:** `${{ steps.mod-info.outputs.modid }}`  
          **Version:** ${{ steps.mod-info.outputs.version }}  
          **Built on:** ${{ runner.os }}  
          **Java Version:** ${{ matrix.java }}
